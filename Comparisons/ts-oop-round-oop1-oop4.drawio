<mxfile host="65bd71144e">
    <diagram name="TypeScript OOP Model Comparison" id="ts-oop-comparison">
        <mxGraphModel dx="1428" dy="711" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="1400" pageHeight="1000" math="0" shadow="0">
            <root>
                <mxCell id="0"/>
                <mxCell id="1" parent="0"/>
                <object label="🧩 Model Comparison — TypeScript OOP Round (SSH via `ollama run`)" tooltip="TypeScript OOP comparison of 4 different AI coding models tested via SSH connection to Ollama. This comprehensive evaluation covers 4 complex OOP scenarios: strongly-typed EventEmitter with generics, generic Repository pattern, immutable HttpRequestBuilder, and Strategy pattern with SerializerRegistry. The comparison reveals significant differences in TypeScript OOP understanding, generic type handling, and design pattern implementation across different model architectures and sizes." id="title">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=20;fontStyle=1;fillColor=#dae8fc;strokeColor=#6c8ebf;verticalAlign=top;spacingTop=10;spacingBottom=10;" parent="1" vertex="1">
                        <mxGeometry x="40" y="20" width="1320" height="60" as="geometry"/>
                    </mxCell>
                </object>
                <object label="📋 Test Environment &amp; Scope" tooltip="SSH-based testing environment connecting to Ollama models via tunnel. This round evaluates complex TypeScript OOP concepts including generics, design patterns, immutability, and type safety. The scope covers 4 distinct OOP scenarios that test different aspects of TypeScript expertise: event handling, data persistence, HTTP building, and serialization strategies." id="test-environment-title">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=14;fontStyle=1;fillColor=#fff2cc;strokeColor=#d6b656;verticalAlign=top;spacingTop=10;spacingBottom=10;" parent="1" vertex="1">
                        <mxGeometry x="40" y="100" width="1320" height="40" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🔧 Environment Details&lt;br&gt;&lt;br&gt;• Connection: `ssh -p 9922 donges@home.donges.it`&lt;br&gt;• Models: deepseek-coder:6.7b, starcoder2:7b, qwen2.5-coder:7b, starcoder2:15b&lt;br&gt;• Testing: Direct SSH via `ollama run` (no Continue integration)&lt;br&gt;• Focus: Pure TypeScript OOP expertise without tool calling complexity" tooltip="SSH connection environment providing direct access to Ollama models without Continue extension complexity. This setup allows pure evaluation of TypeScript OOP understanding without tool calling schema issues. The environment tests 4 models across 4 complex OOP scenarios, focusing on generics, design patterns, immutability, and type safety implementation." id="environment-details">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=11;fillColor=#fff2cc;strokeColor=#d6b656;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="40" y="160" width="640" height="120" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🎯 OOP Test Scenarios&lt;br&gt;&lt;br&gt;• **OOP1** — Strongly-typed `EventEmitter&lt;Events&gt;` (generics, tuple args)&lt;br&gt;• **OOP2** — Generic in-memory `Repository&lt;T extends Entity&gt;` (CRUD + query)&lt;br&gt;• **OOP3** — Immutable, fluent `HttpRequestBuilder`&lt;br&gt;• **OOP4** — Strategy pattern `Serializer` + `SerializerRegistry`" tooltip="Four comprehensive OOP test scenarios covering different aspects of TypeScript expertise. OOP1 tests generic event handling with tuple arguments. OOP2 evaluates generic repository patterns with CRUD operations. OOP3 challenges immutability and fluent API design. OOP4 tests strategy pattern implementation with type-safe registries. Each scenario requires different levels of TypeScript OOP mastery." id="test-scenarios">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=11;fillColor=#e1d5e7;strokeColor=#9673a6;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="700" y="160" width="660" height="120" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🧩 OOP1 — `EventEmitter&lt;Events&gt;` Results&lt;br&gt;&lt;br&gt;**Prompt:** Implement a strongly-typed class `EventEmitter&lt;Events&gt;` where `Events` is a map of event names to tuple arg types. API: `on/off/once/emit/clear` (all chainable). Include TypeScript class with private fields, usage example, and show wrong arg types don&#39;t compile." tooltip="Results for OOP1: Strongly-typed EventEmitter with generics and tuple arguments. This test evaluates models&#39; understanding of generic type constraints, tuple argument handling, and event-driven architecture patterns. The challenge requires proper generic typing, method chaining, and type-safe event handling implementation." id="oop1-title">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=16;fontStyle=1;fillColor=#d5e8d4;strokeColor=#82b366;verticalAlign=top;spacingTop=10;" parent="1" vertex="1">
                        <mxGeometry x="40" y="300" width="1320" height="120" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🥇 Winner: Qwen 2.5 7B&lt;br&gt;&lt;br&gt;✅ Clean API &amp; typing&lt;br&gt;✅ Public signatures correct&lt;br&gt;⚠️ Minor demo fixes needed&lt;br&gt;✅ Best overall implementation" tooltip="Qwen 2.5 7B wins OOP1 with clean API design and correct typing. The model implemented proper generic constraints, correct method signatures, and clean event handling logic. While minor demo improvements are needed, it demonstrated the best understanding of strongly-typed event emitters with generics and tuple arguments." id="oop1-winner">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;fillColor=#d5e8d4;strokeColor=#82b366;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="40" y="440" width="320" height="110" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🥈 DeepSeek 6.7B&lt;br&gt;&lt;br&gt;✅ Complete API implementation&lt;br&gt;✅ Proper generic typing&lt;br&gt;⚠️ Array store (prefer Set)&lt;br&gt;⚠️ `once` wrapper uses `any`" tooltip="DeepSeek 6.7B shows strong OOP1 performance with complete API implementation and proper generic typing. The model correctly implemented all required methods with proper type constraints. However, it used array storage instead of Set per event and had typing issues with the `once` wrapper method." id="oop1-deepseek">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;fillColor=#fff2cc;strokeColor=#d6b656;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="380" y="440" width="320" height="110" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🥉 StarCoder 15B&lt;br&gt;&lt;br&gt;✅ API &amp; chaining correct&lt;br&gt;✅ Private field implementation&lt;br&gt;⚠️ Storage typed as union&lt;br&gt;⚠️ Example logs twice" tooltip="StarCoder 15B demonstrates solid OOP1 implementation with correct API design and method chaining. The model properly implemented private fields and chaining behavior. However, it had storage typing issues (union instead of per-event typing) and demo problems with the `once` method example." id="oop1-starcoder15b">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;fillColor=#ffe6cc;strokeColor=#d79b00;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="720" y="440" width="320" height="110" as="geometry"/>
                    </mxCell>
                </object>
                <object label="❌ StarCoder 7B&lt;br&gt;&lt;br&gt;❌ No output produced&lt;br&gt;❌ Complete failure&lt;br&gt;❌ No OOP understanding&lt;br&gt;❌ Cannot handle complex generics" tooltip="StarCoder 7B completely failed OOP1 with no output produced. The model showed no understanding of complex generic TypeScript patterns, strongly-typed event emitters, or OOP design principles. This represents a complete failure in TypeScript OOP expertise." id="oop1-starcoder7b">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;fillColor=#f8cecc;strokeColor=#b85450;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="1060" y="440" width="320" height="110" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🧩 OOP2 — `Repository&lt;T extends Entity&gt;` Results&lt;br&gt;&lt;br&gt;**Prompt:** Create a generic OOP repository with `interface Entity { id: string }` and `class Repository&lt;T extends Entity&gt;`. Methods: `create/getById/update/delete/query` (all async). Use private Map for storage, prevent duplicate IDs, clone on return. Include UserRepo example with CRUD flow." tooltip="Results for OOP2: Generic in-memory Repository with CRUD operations and query functionality. This test evaluates models&#39; understanding of generic constraints, data persistence patterns, mutation safety, and async operations. The challenge requires proper generic typing, Map-based storage, duplicate prevention, and safe data cloning." id="oop2-title">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=16;fontStyle=1;fillColor=#d5e8d4;strokeColor=#82b366;verticalAlign=top;spacingTop=10;" parent="1" vertex="1">
                        <mxGeometry x="40" y="560" width="1320" height="120" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🥇 Winner: Qwen 2.5 7B&lt;br&gt;&lt;br&gt;✅ Closest to spec compliance&lt;br&gt;✅ Returns frozen shallow clones&lt;br&gt;⚠️ Example mutates frozen result&lt;br&gt;✅ Best mutation safety" tooltip="Qwen 2.5 7B wins OOP2 with the closest specification compliance and best mutation safety. The model correctly implemented generic repository patterns, proper Map storage, duplicate checking, and returned frozen shallow clones. Only minor issue with example code mutating frozen results." id="oop2-winner">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;fillColor=#d5e8d4;strokeColor=#82b366;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="40" y="700" width="320" height="100" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🥈 DeepSeek 6.7B&lt;br&gt;&lt;br&gt;✅ Methods/Map/dup-check correct&lt;br&gt;⚠️ Deep clone via JSON (lossy)&lt;br&gt;✅ Good flow example&lt;br&gt;⚠️ `delete` throws on missing id" tooltip="DeepSeek 6.7B shows good OOP2 implementation with correct methods, Map storage, and duplicate checking. The model provided a good flow example but used lossy JSON deep cloning and had error handling issues with the delete method throwing instead of returning boolean." id="oop2-deepseek">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;fillColor=#fff2cc;strokeColor=#d6b656;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="380" y="700" width="320" height="100" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🥉 StarCoder 15B&lt;br&gt;&lt;br&gt;✅ Methods/Map/dup-check correct&lt;br&gt;⚠️ Shallow clone only (not frozen)&lt;br&gt;⚠️ Minor output mismatch&lt;br&gt;⚠️ Consider `Object.freeze`" tooltip="StarCoder 15B demonstrates solid OOP2 implementation with correct methods, Map storage, and duplicate checking. However, it only provided shallow cloning without freezing, had minor output mismatches, and could benefit from proper Object.freeze implementation for better mutation safety." id="oop2-starcoder15b">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;fillColor=#ffe6cc;strokeColor=#d79b00;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="720" y="700" width="320" height="100" as="geometry"/>
                    </mxCell>
                </object>
                <object label="❌ StarCoder 7B&lt;br&gt;&lt;br&gt;❌ No output produced&lt;br&gt;❌ Complete failure&lt;br&gt;❌ No repository understanding&lt;br&gt;❌ Cannot handle generic patterns" tooltip="StarCoder 7B completely failed OOP2 with no output produced. The model showed no understanding of generic repository patterns, CRUD operations, or data persistence concepts. This represents a complete failure in TypeScript OOP and design pattern expertise." id="oop2-starcoder7b">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;fillColor=#f8cecc;strokeColor=#b85450;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="1060" y="700" width="320" height="100" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🧩 OOP3 — `HttpRequestBuilder` (Immutable, Fluent) Results&lt;br&gt;&lt;br&gt;**Prompt:** Design an immutable, fluent `HttpRequestBuilder` with `withMethod/withUrl/withHeader/withQuery/withBody/build()`. Rules: Each method returns NEW builder instance (no mutation), query values stringified, headers case-insensitive. Include chaining example." tooltip="Results for OOP3: Immutable, fluent HttpRequestBuilder with method chaining. This test evaluates models&#39; understanding of immutability patterns, fluent API design, and state management. The challenge requires proper state carry-over between method calls, header normalization, query stringification, and immutable object creation." id="oop3-title">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=16;fontStyle=1;fillColor=#d5e8d4;strokeColor=#82b366;verticalAlign=top;spacingTop=10;" parent="1" vertex="1">
                        <mxGeometry x="40" y="820" width="1320" height="120" as="geometry"/>
                    </mxCell>
                </object>
                <object label="⚠️ All Models Failed Immutability&lt;br&gt;&lt;br&gt;❌ **Critical Issue**: All models drop prior state&lt;br&gt;❌ New instances don&#39;t clone previous state&lt;br&gt;❌ Method chaining breaks completely&lt;br&gt;⚠️ Need private state + merged cloning" tooltip="OOP3 reveals a critical gap in all models&#39; understanding of immutability patterns. Every model failed to properly carry over state between method calls, causing method chaining to break completely. This represents a fundamental misunderstanding of immutable fluent API design, where each method must return a new instance with merged state from the previous instance." id="oop3-critical-issue">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;fillColor=#f8cecc;strokeColor=#b85450;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="40" y="960" width="1320" height="110" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🔧 Correct Immutable Pattern&lt;br&gt;&lt;br&gt;```ts&lt;br&gt;class HttpRequestBuilder {&lt;br&gt;  private constructor(private readonly s: State) {}&lt;br&gt;  static create() { return new HttpRequestBuilder({...}); }&lt;br&gt;  withMethod(method) {&lt;br&gt;    return new HttpRequestBuilder({ ...this.s, method });&lt;br&gt;  }&lt;br&gt;  // Each method merges previous state&lt;br&gt;}```" tooltip="The correct immutable pattern requires private state storage and proper state merging in each method. Each `with*` method must return a new instance with the previous state merged with new values. This ensures method chaining works correctly and maintains immutability principles. None of the tested models implemented this pattern correctly." id="oop3-correct-pattern">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=10;fillColor=#e1d5e7;strokeColor=#9673a6;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="40" y="1080" width="1320" height="160" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🧩 OOP4 — `Serializer` Strategy + `SerializerRegistry` Results&lt;br&gt;&lt;br&gt;**Prompt:** Create `Serializer&lt;T&gt;` strategy interface with `serialize/deserialize` methods. Provide `JsonSerializer&lt;T&gt;` and `Base64JsonSerializer&lt;T&gt;` classes. Add `SerializerRegistry` with `register/get` methods. Demo: register both, pick by name, round-trip object. Show typed usage and failing type-check example." tooltip="Results for OOP4: Strategy pattern implementation with Serializer interface and SerializerRegistry. This test evaluates models&#39; understanding of strategy patterns, generic type preservation, registry design, and runtime type safety. The challenge requires proper interface implementation, generic type handling, and type-safe registry operations." id="oop4-title">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=16;fontStyle=1;fillColor=#d5e8d4;strokeColor=#82b366;verticalAlign=top;spacingTop=10;" parent="1" vertex="1">
                        <mxGeometry x="40" y="1260" width="1320" height="120" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🥇 DeepSeek 6.7B&lt;br&gt;&lt;br&gt;✅ Complete class implementation&lt;br&gt;✅ Round-trip example works&lt;br&gt;⚠️ Non-generic registry&lt;br&gt;⚠️ Uses Node `Buffer` (browser-incompatible)" tooltip="DeepSeek 6.7B wins OOP4 with complete class implementation and working round-trip examples. The model correctly implemented Serializer interface, JsonSerializer, and Base64JsonSerializer classes. However, it used a non-generic registry and Node.js Buffer which isn&#39;t browser-compatible." id="oop4-deepseek">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;fillColor=#d5e8d4;strokeColor=#82b366;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="40" y="1410" width="320" height="100" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🥈 Qwen 2.5 7B&lt;br&gt;&lt;br&gt;✅ Classes implemented correctly&lt;br&gt;✅ Base64 via `btoa/atob` (browser-compatible)&lt;br&gt;⚠️ Non-generic registry&lt;br&gt;⚠️ Type-error comment not tied to registry" tooltip="Qwen 2.5 7B shows good OOP4 implementation with correct class structure and browser-compatible base64 encoding using `btoa/atob`. The model implemented proper serializer classes but used a non-generic registry and didn&#39;t properly demonstrate type-checking failures related to the registry." id="oop4-qwen">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;fillColor=#fff2cc;strokeColor=#d6b656;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="380" y="1410" width="320" height="100" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🥉 StarCoder 15B&lt;br&gt;&lt;br&gt;✅ Classes implemented correctly&lt;br&gt;✅ Base64 via `btoa/atob` (browser-compatible)&lt;br&gt;⚠️ Non-generic registry&lt;br&gt;⚠️ Lacks failing type-check demo" tooltip="StarCoder 15B demonstrates solid OOP4 implementation with correct class structure and browser-compatible base64 encoding. The model properly implemented serializer classes but used a non-generic registry and didn&#39;t include proper type-checking failure demonstrations." id="oop4-starcoder15b">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;fillColor=#ffe6cc;strokeColor=#d79b00;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="720" y="1410" width="320" height="100" as="geometry"/>
                    </mxCell>
                </object>
                <object label="❌ StarCoder 7B&lt;br&gt;&lt;br&gt;❌ No output produced&lt;br&gt;❌ Complete failure&lt;br&gt;❌ No strategy pattern understanding&lt;br&gt;❌ Cannot handle complex OOP" tooltip="StarCoder 7B completely failed OOP4 with no output produced. The model showed no understanding of strategy patterns, serializer interfaces, or complex OOP design patterns. This represents a complete failure in advanced TypeScript OOP expertise." id="oop4-starcoder7b">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;fillColor=#f8cecc;strokeColor=#b85450;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="1060" y="1410" width="320" height="100" as="geometry"/>
                    </mxCell>
                </object>
                <object label="📊 Overall Performance Summary" tooltip="Comprehensive summary of all models&#39; performance across the 4 OOP scenarios. This analysis reveals the overall TypeScript OOP expertise, consistency, and reliability of each model across different complexity levels and design patterns." id="summary-title">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=16;fontStyle=1;fillColor=#dae8fc;strokeColor=#6c8ebf;verticalAlign=top;spacingTop=10;" parent="1" vertex="1">
                        <mxGeometry x="40" y="1530" width="1320" height="40" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🥇 Overall Winner: Qwen 2.5 7B (8.6/10)&lt;br&gt;&lt;br&gt;✅ Most consistent across prompts&lt;br&gt;✅ Strong typing/design rigor&lt;br&gt;✅ Excellent API correctness&lt;br&gt;⚠️ Minor example quality issues&lt;br&gt;&lt;br&gt;Recommended for: Complex TypeScript OOP projects" tooltip="Qwen 2.5 7B emerges as the overall winner with 8.6/10, demonstrating the most consistent performance across all OOP scenarios. The model shows strong typing and design rigor, excellent API correctness, and reliable output. While it has minor example quality issues, it represents the best choice for complex TypeScript OOP projects requiring generics, design patterns, and type safety." id="overall-winner">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;fillColor=#d5e8d4;strokeColor=#82b366;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="40" y="1590" width="320" height="140" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🥈 Strong Performer: DeepSeek 6.7B (8.0/10)&lt;br&gt;&lt;br&gt;✅ Good output reliability&lt;br&gt;✅ Solid typing/design rigor&lt;br&gt;✅ Good API correctness&lt;br&gt;⚠️ Example quality issues&lt;br&gt;&lt;br&gt;Recommended for: Reliable TypeScript development" tooltip="DeepSeek 6.7B scores 8.0/10 with strong performance across OOP scenarios. The model demonstrates good output reliability, solid typing and design rigor, and good API correctness. While it has some example quality issues, it provides reliable TypeScript development capabilities with consistent performance." id="strong-performer">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;fillColor=#fff2cc;strokeColor=#d6b656;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="380" y="1590" width="320" height="140" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🥉 Solid Option: StarCoder 15B (7.9/10)&lt;br&gt;&lt;br&gt;✅ Good output reliability&lt;br&gt;✅ Solid typing/design rigor&lt;br&gt;✅ Good API correctness&lt;br&gt;⚠️ Example quality issues&lt;br&gt;&lt;br&gt;Recommended for: General TypeScript OOP work" tooltip="StarCoder 15B scores 7.9/10 with solid performance across OOP scenarios. The model shows good output reliability, solid typing and design rigor, and good API correctness. While it has example quality issues similar to other models, it provides a solid option for general TypeScript OOP development work." id="solid-option">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;fillColor=#ffe6cc;strokeColor=#d79b00;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="720" y="1590" width="320" height="140" as="geometry"/>
                    </mxCell>
                </object>
                <object label="❌ Complete Failure: StarCoder 7B (0/10)&lt;br&gt;&lt;br&gt;❌ No output reliability&lt;br&gt;❌ No typing/design understanding&lt;br&gt;❌ No API correctness&lt;br&gt;❌ Cannot handle complex OOP&lt;br&gt;&lt;br&gt;Not recommended for TypeScript OOP" tooltip="StarCoder 7B scores 0/10 with complete failure across all OOP scenarios. The model shows no output reliability, no understanding of typing or design principles, no API correctness, and cannot handle complex OOP patterns. This model is not recommended for any TypeScript OOP development work." id="complete-failure">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;fillColor=#f8cecc;strokeColor=#b85450;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="1060" y="1590" width="320" height="140" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🔮 Key Insights &amp; Recommendations" tooltip="Key insights from the TypeScript OOP evaluation revealing important patterns, strengths, and limitations across different models and OOP scenarios. This analysis provides actionable recommendations for choosing the right model based on specific TypeScript OOP requirements." id="insights-title">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=16;fontStyle=1;fillColor=#e1d5e7;strokeColor=#9673a6;verticalAlign=top;spacingTop=10;" parent="1" vertex="1">
                        <mxGeometry x="40" y="1750" width="1320" height="40" as="geometry"/>
                    </mxCell>
                </object>
                <object label="💡 Critical Findings&lt;br&gt;&lt;br&gt;• **Immutability Gap**: All models failed OOP3 immutability patterns&lt;br&gt;• **Generic Registry**: All models used non-generic registries in OOP4&lt;br&gt;• **Size Matters**: 7B models struggle with complex OOP concepts&lt;br&gt;• **Consistency**: Qwen 2.5 7B most reliable across scenarios&lt;br&gt;• **Example Quality**: All models need better demo code" tooltip="Critical findings reveal significant gaps in TypeScript OOP understanding across all models. The most concerning issue is universal failure in immutability patterns (OOP3), where all models failed to implement proper state carry-over. All models also struggled with generic registry patterns. Smaller 7B models show particular difficulty with complex OOP concepts, while Qwen 2.5 7B demonstrates the most consistent performance." id="critical-findings">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=11;fillColor=#f8cecc;strokeColor=#b85450;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="40" y="1810" width="320" height="160" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🎯 Best Use Cases&lt;br&gt;&lt;br&gt;• **Qwen 2.5 7B**: Complex OOP projects, generics, design patterns&lt;br&gt;• **DeepSeek 6.7B**: Reliable development, consistent performance&lt;br&gt;• **StarCoder 15B**: General OOP work, solid baseline&lt;br&gt;• **StarCoder 7B**: Avoid for OOP, consider simpler tasks only" tooltip="Best use cases for each model based on TypeScript OOP performance. Qwen 2.5 7B excels at complex OOP projects requiring generics and design patterns. DeepSeek 6.7B provides reliable development with consistent performance. StarCoder 15B offers a solid baseline for general OOP work. StarCoder 7B should be avoided for OOP tasks and considered only for simpler programming tasks." id="best-use-cases">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=11;fillColor=#d5e8d4;strokeColor=#82b366;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="380" y="1810" width="320" height="160" as="geometry"/>
                    </mxCell>
                </object>
                <object label="⚠️ Common Weaknesses&lt;br&gt;&lt;br&gt;• **Immutability**: All models fail fluent API state management&lt;br&gt;• **Generic Registries**: Non-generic implementations limit type safety&lt;br&gt;• **Example Quality**: Demo code often has issues&lt;br&gt;• **Error Handling**: Inconsistent error handling patterns&lt;br&gt;• **Browser Compatibility**: Some models use Node.js-specific APIs" tooltip="Common weaknesses across all models reveal areas for improvement in TypeScript OOP expertise. The most critical issue is universal failure in immutability patterns for fluent APIs. All models also struggle with generic registry implementations, limiting type safety. Example quality is consistently poor across models, and error handling patterns are inconsistent. Some models also use Node.js-specific APIs that aren&#39;t browser-compatible." id="common-weaknesses">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=11;fillColor=#fff2cc;strokeColor=#d6b656;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="720" y="1810" width="320" height="160" as="geometry"/>
                    </mxCell>
                </object>
                <object label="🚀 Future Improvements&lt;br&gt;&lt;br&gt;• **Enhanced Training**: Focus on immutability patterns&lt;br&gt;• **Generic Mastery**: Better generic type handling&lt;br&gt;• **Example Quality**: Improve demo code generation&lt;br&gt;• **Browser APIs**: Use cross-platform APIs&lt;br&gt;• **Error Patterns**: Standardize error handling" tooltip="Future improvements needed across all models to enhance TypeScript OOP expertise. The most critical need is enhanced training on immutability patterns, as this represents a universal failure. Models also need better generic type handling, especially for registry patterns. Example quality needs significant improvement, and models should use cross-platform APIs instead of Node.js-specific ones. Error handling patterns should be standardized across all implementations." id="future-improvements">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=11;fillColor=#e1d5e7;strokeColor=#9673a6;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="1060" y="1810" width="320" height="160" as="geometry"/>
                    </mxCell>
                </object>
                <object label="📈 Performance Metrics Matrix" tooltip="Quantitative performance matrix showing detailed scores for each model across all OOP scenarios and evaluation criteria. This matrix provides a comprehensive comparison of TypeScript OOP expertise across different models and complexity levels." id="metrics-title">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=16;fontStyle=1;fillColor=#dae8fc;strokeColor=#6c8ebf;verticalAlign=top;spacingTop=10;" parent="1" vertex="1">
                        <mxGeometry x="40" y="1990" width="1320" height="40" as="geometry"/>
                    </mxCell>
                </object>
                <object label="TypeScript OOP Performance Matrix&lt;br&gt;&lt;br&gt;&lt;table style=&quot;width:100%; border-collapse:collapse;&quot;&gt;&lt;tr&gt;&lt;th style=&quot;text-align:left; padding:4px;&quot;&gt;Model&lt;/th&gt;&lt;th style=&quot;text-align:center; padding:4px;&quot;&gt;Output Reliability&lt;/th&gt;&lt;th style=&quot;text-align:center; padding:4px;&quot;&gt;Typing/Design Rigor&lt;/th&gt;&lt;th style=&quot;text-align:center; padding:4px;&quot;&gt;API Correctness&lt;/th&gt;&lt;th style=&quot;text-align:center; padding:4px;&quot;&gt;Example Quality&lt;/th&gt;&lt;th style=&quot;text-align:center; padding:4px;&quot;&gt;OOP3 Immutability&lt;/th&gt;&lt;th style=&quot;text-align:center; padding:4px;&quot;&gt;OOP4 Registry Generics&lt;/th&gt;&lt;th style=&quot;text-align:center; padding:4px;&quot;&gt;Overall&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;padding:4px;&quot;&gt;&lt;b&gt;Qwen 2.5 7B&lt;/b&gt;&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;✅ 9/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;✅ 9/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;✅ 9/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;⚠️ 7/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;⚠️ 6/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;⚠️ 6/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;&lt;b&gt;🥇 8.6/10&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;padding:4px;&quot;&gt;&lt;b&gt;DeepSeek 6.7B&lt;/b&gt;&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;✅ 8/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;✅ 8/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;✅ 8/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;⚠️ 7/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;⚠️ 6/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;⚠️ 6/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;&lt;b&gt;🥈 8.0/10&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;padding:4px;&quot;&gt;&lt;b&gt;StarCoder 15B&lt;/b&gt;&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;✅ 8/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;✅ 8/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;✅ 8/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;⚠️ 7/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;⚠️ 6/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;⚠️ 6/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;&lt;b&gt;🥉 7.9/10&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;padding:4px;&quot;&gt;&lt;b&gt;StarCoder 7B&lt;/b&gt;&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;❌ 0/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;❌ 0/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;❌ 0/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;❌ 0/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;❌ 0/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;❌ 0/10&lt;/td&gt;&lt;td style=&quot;text-align:center; padding:4px;&quot;&gt;&lt;b&gt;❌ 0/10&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;" tooltip="Performance matrix showing quantitative scores for each model across TypeScript OOP evaluation criteria. Qwen 2.5 7B leads with 8.6/10 overall, excelling in output reliability, typing/design rigor, and API correctness. DeepSeek 6.7B and StarCoder 15B show similar strong performance with 8.0/10 and 7.9/10 respectively. All three successful models struggle with immutability patterns (OOP3) and generic registries (OOP4). StarCoder 7B shows complete failure across all metrics with 0/10." id="performance-matrix">
                    <mxCell style="rounded=1;whiteSpace=wrap;html=1;fontSize=11;fillColor=#f5f5f5;strokeColor=#666666;verticalAlign=top;spacingTop=5;" parent="1" vertex="1">
                        <mxGeometry x="40" y="2050" width="1320" height="160" as="geometry"/>
                    </mxCell>
                </object>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>