{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use modern JavaScript features", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use performance improvements", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use better maintainability", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
{"task_type": "style_refactor", "instruction": "Refactor this code to use functional programming principles", "input": "Legacy code that needs improvement", "output": "// Before: Legacy code\nfunction oldFunction(data) {\n  var result = [];\n  for (var i = 0; i < data.length; i++) {\n    if (data[i].active) {\n      result.push(data[i].name);\n    }\n  }\n  return result;\n}\n\n// After: Modern refactored code\nconst getActiveNames = (data: User[]): string[] => \n  data\n    .filter(user => user.active)\n    .map(user => user.name);"}
